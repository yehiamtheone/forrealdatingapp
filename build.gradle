plugins {
    id 'application'
    id  'java'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'edu.sc.seis.launch4j' version '3.0.6'


}

repositories {
    mavenCentral()
}
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)

    }
}
javafx {
    version = "23.0.2"
    modules = [ 'javafx.base','javafx.controls', 'javafx.graphics','javafx.swing' ]
}
mainClassName = 'forrealdatingapp.App'

jar {
    manifest {
        attributes 'Main-Class': 'forrealdatingapp.Launcher'
    }
    duplicatesStrategy = 'exclude'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
 
    }
    from('.') {   // <-- project root
        include '.env'
    }
}
def launch4jOutputDir = "${buildDir}/launch4j"

tasks.register('downloadJre') {
    doLast {
        // Define the download URL for Adoptium Temurin JRE 21 (Windows x64)
        def jreUrl = "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.2%2B13/OpenJDK21U-jre_x64_windows_hotspot_21.0.2_13.zip"
        def jreZip = "${rootProject.projectDir}/jre.zip"
        def jreDir = "${rootProject.projectDir}/jre"

        // Create the jre-download directory if it doesn't exist
        mkdir(jreDir)

        // Download the JRE
        println "Downloading JRE from $jreUrl..."
        new URL(jreUrl).withInputStream { input ->
            new File(jreZip).withOutputStream { output ->
                output << input
            }
        }

        // Extract the JRE
        println "Extracting JRE to $jreDir..."
        copy {
            from zipTree(jreZip)
            into jreDir
        }

        // Clean up the zip file
        delete jreZip

        println "JRE downloaded and extracted to $jreDir"
    }
}
launch4j {
    outfile = 'forrealdatingapp.exe'
    jarTask = project.tasks.jar
    bundledJrePath = 'jre' //
    outputDir = "${buildDir}/launch4j"
}
tasks.register('zipLaunch4j', Zip) {
    dependsOn 'createExe'
    archiveFileName = "forrealdatingapp.zip" // Custom name with version
    destinationDirectory = file("${buildDir}/distributions")

    from(launch4jOutputDir) {
        include '**/*'
    }
    from("${rootProject.projectDir}/jre/jdk-21.0.2+13-jre") { // Include the bundled JRE
        into 'jre'
    }

    doLast {
        println "Created zip archive at ${archiveFile.get()}"
    }
}
// def osName = System.getProperty("os.name").toLowerCase()
// def javafxVersion = "23.0.2" // JavaFX version
// def javafxPlatform = osName.contains("win") ? "win" : osName.contains("linux") ? "linux" : osName.contains("mac") ? "mac" : null
// def javafxJmodsPath = "${rootProject.projectDir}/javafx-jmods" // Local path to store the JMODs

// Task to download and extract JavaFX JMODs
// tasks.register('downloadJavaFxJmods') {
//     doLast {
//         // Check if the JMODs directory already exists
//         if (file(javafxJmodsPath).exists()) {
//             println "JavaFX JMODs already exist at $javafxJmodsPath. Skipping download."
//             return // Exit the task if the JMODs are already present
//         }

//         if (javafxPlatform == null) {
//             throw new RuntimeException("Unsupported operating system: $osName")
//         }

//         def javafxUrl = "https://download2.gluonhq.com/openjfx/23.0.2/openjfx-23.0.2_windows-x64_bin-jmods.zip"
//         def javafxZip = "${projectDir}/javafx-jmods.zip"

//         // Create the javafx-jmods directory if it doesn't exist
//         mkdir(javafxJmodsPath)

//         // Download the JavaFX JMODs
//         println "Downloading JavaFX JMODs from $javafxUrl..."
//         new URL(javafxUrl).withInputStream { input ->
//             new File(javafxZip).withOutputStream { output ->
//                 output << input
//             }
//         }

//         // Extract the JMODs
//         println "Extracting JavaFX JMODs to $javafxJmodsPath..."
//         copy {
//             from zipTree(javafxZip)
//             into javafxJmodsPath
//         }

//         // Clean up the zip file
//         delete javafxZip
//     }
// }



dependencies {
    
    /* uncomment for cross-platform jar: */
runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:win"
runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:linux"
runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:mac"
implementation 'org.openjfx:javafx-base:23.0.2'
implementation 'org.openjfx:javafx-controls:23.0.2'
implementation 'org.openjfx:javafx-graphics:23.0.2'
implementation 'org.openjfx:javafx-swing:23.0.2'
implementation 'com.adobe.xmp:xmpcore:6.1.11'
implementation 'com.drewnoakes:metadata-extractor:2.19.0'
implementation 'io.github.cdimascio:dotenv-java:3.2.0'
implementation 'com.fasterxml.jackson.core:jackson-annotations:2.18.3'
implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'
implementation 'com.fasterxml.jackson.core:jackson-core:2.18.3'
implementation 'com.cloudinary:cloudinary-http5:2.2.0'
implementation 'com.cloudinary:cloudinary-core:2.2.0'
implementation 'org.controlsfx:controlsfx:11.1.2'
implementation 'org.slf4j:slf4j-api:2.0.17'
}

