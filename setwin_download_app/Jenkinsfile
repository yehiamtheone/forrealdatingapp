pipeline {
    agent {
        label 'win'
    }

    environment {
        // Define environment variables (can be loaded from Jenkins credentials)
        EXPRESS = credentials('EXPRESS') // Fetch from Jenkins credentials
        TCP = credentials('TCP')
        CLOUDINARY_URL = credentials('CLOUDINARY_URL')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        MONGO_URL = credentials('MONGO_URL')
        GMAIL_SMTP_EMAIL = credentials('GMAIL_SMTP_EMAIL')
        GMAIL_SMTP_PASSWORD = credentials('GMAIL_SMTP_PASSWORD')
        JWT_SECRET = credentials('JWT_SECRET')
    }

    stages {



        // Stage 2: Checkout code from SCM (Git)
        stage('Checkout') {
            steps {
                checkout scm // Checkout code from the configured SCM (e.g., Git)
            }
        }

        // Stage 3: Add Environment Variables
        stage('Add Env Vars') {
            steps {
                script {
                    bat """
                        setx EXPRESS "${env.EXPRESS_HOST}"
                        setx TCP "${env.TCP}"
                        setx CLOUDINARY_URL "${env.CLOUDINARY_URL}"
                        setx GMAIL_SMTP_EMAIL "${GMAIL_SMTP_EMAIL}"
                        setx GMAIL_SMTP_PASSWORD "${env.GMAIL_SMTP_PASSWORD}"
                        setx JWT_SECRET "${env.JWT_SECRET}"
                        setx MONGO_URL "${env.MONGO_URL}"


                    """
                }
            }
        }
        stage('Download Latest Release Asset') {
            steps {
                script {
                    // Fetch the latest release information from GitHub using PowerShell
                    def releaseInfo = powershell(script: '''
                        $response = Invoke-RestMethod -Uri "https://api.github.com/repos/yehiamtheone/forrealdatingapp/releases/latest" `
                            -Headers @{Authorization="Bearer $env:GITHUB_TOKEN"; Accept="application/vnd.github.v3+json"}
                        $asset = $response.assets | Where-Object { $_.name -eq "forrealdatingapp.zip" }
                        if ($asset) {
                            Write-Output $asset.browser_download_url
                        } else {
                            exit 1
                        }
                    ''', returnStdout: true).trim()

                    if (releaseInfo) {
                        echo "Downloading the latest release asset: ${releaseInfo}"
                        powershell """
                            Invoke-WebRequest -Uri "${releaseInfo}" -OutFile "forrealdatingapp.zip"
                        """
                    } else {
                        error "Failed to find the release asset 'forrealdatingapp.zip' in the latest release."
                    }
                }
            }
        }
 



    }

    post {
        success {
            echo 'Pipeline succeeded! ðŸŽ‰'
            // Notify the team
        }
        failure {
            echo 'Pipeline failed! ðŸ˜¢'
            // Notify the team
        }

    }
}